export interface LadderOptions
  swap?: boolean
  insert?: boolean
  delete?: boolean
  extra?: Set<string>
  forbid?: Set<string>

export interface LadderDAG
  child: Map<string, string[]>
  parent: Map<string, string[]>
  dist: Map<string, number>

export class LadderSearch
  dict?: string[]
  dictSet?: Set<string>
  options: LadderOptions

  constructor(@options = {})
  setDict(@dict: string[])
    @dictSet = new Set @dict
  parseDict(s: string)
    @setDict s.split(/\s+/).filter (&)
  has(s: string)
    (or)
      @options.extra?.has s
      (and)
        @dictSet?.has s
        not @options.forbid?.has s

  neighbors(word: string): Generator<string>
    for each letter, i of word
      for nextLetter of ['a'..'z']
        continue if letter is nextLetter
        nextWord := `${word[0...i]}${nextLetter}${word[i+1..]}`
        yield nextWord if @has nextWord
    if @options.swap
      for each a, i of word
        for each j of [i+1...word.length]
          b := word[j]
          nextWord := `${word[0...i]}${b}${word[i+1...j]}${a}${word[j+1..]}`
          yield nextWord if @has nextWord
    if @options.insert
      for each i of [0..word.length]
        for nextLetter of ['a'..'z']
          nextWord := `${word[0...i]}${nextLetter}${word[i..]}`
          yield nextWord if @has nextWord
    if @options.delete
      for each i of [0...word.length]
        nextWord := `${word[0...i]}${word[i+1..]}`
        yield nextWord if @has nextWord

  shortestLadder(start: string, goal: string): string[] | null
    solutions := []
    frontier .= [start]
    parent := new Map<string, string>
    d .= 0

    function buildSolution()
      word: string .= goal
      solution := [word]
      until word is start
        if prevWord := parent.get word
          word = prevWord
        else
          throw new Error `missing parent for '${word}'`
        solution.push word
      solution.reverse()

    while frontier.length
      nextFrontier: string[] .= []
      for each word of frontier
        for nextWord of @neighbors word
          continue if parent.has nextWord
          parent.set nextWord, word
          if nextWord is goal
            return buildSolution()
          nextFrontier.push nextWord
      frontier = nextFrontier
      d++
    null

  ladderDAG(start: string, goal: string): LadderDAG
    frontier .= [start]
    parent .= new Map<string, string[]>
    dist .= new Map<string, number>

    while frontier.length
      nextFrontier: string[] .= []
      for each word of frontier
        for nextWord of @neighbors word
          unless parent.has nextWord
            parent.set nextWord, [word]
            nextFrontier.push nextWord
          else
            unless parent.get(nextWord)!.includes word
              parent.get(nextWord)!.push word
      frontier = nextFrontier

    d .= 0
    relevant := new Map<string, string[]>
    frontier = [goal]
    while frontier.length
      prevFrontier: string[] .= []
      for each word of frontier
        continue if relevant.has word
        dist.set word, d
        parents := parent.get(word)!
        relevant.set word, parents
        prevFrontier ++= parents
      frontier = prevFrontier
      d++
    parent = relevant

    child := new Map<string, string[]>
    for [c, parents] of parent.entries()
      for each p of parents
        unless child.has p
          child.set p, [c]
        else
          child.get(p)!.push c

    {parent, child, dist}
