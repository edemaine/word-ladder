{createEffect, createMemo, createSignal, Show} from 'solid-js'
{createStore} from 'solid-js/store'
{type LadderDAG, type LadderOptions, LadderSearch} from './ladder.civet'

wordListEcprice from '../data/wordlist.ecprice.txt'
wordListDwyl from '../data/wordlist.dwyl.txt'
wordListURL :=
  ecprice: wordListEcprice
  dwyl: wordListDwyl
type WordList = keyof typeof wordListURL

defaultState :=
  start: ''
  goal: ''
  extra: ''
  forbid: ''
  swap: true
  insert: true
  delete: true
  shortest: true

export function App
  [state, setState] := createStore {
    ...defaultState
    path: [] as string[]
  }
  options := createMemo<LadderOptions> =>
    extra := state.extra.toLowerCase().split(/\s+/).filter &
    extra.push state.start
    extra.push state.goal if state.goal
    return {
      state.{swap,insert}
      state.delete
      extra: new Set extra
      forbid: new Set state.forbid.toLowerCase().split(/\s+/).filter &
    }
  ladderSearch := new LadderSearch []
  [ladder, setLadder] := createSignal<string[] | null> []
  [DAG, setDAG] := createSignal<LadderDAG | null>()
  [computing, setComputing] := createSignal false
  [dictSet, setDictSet] := createSignal<Set<string> | undefined>()
  [ladderText, setLadderText] := createSignal ''

  function loadURL
    params := new URLSearchParams window.location.search
    for key of ['start', 'goal', 'extra', 'forbid'] as const
      setState key, params.get(key) ?? defaultState[key]
    for key of ['swap', 'insert', 'delete', 'shortest'] as const
      set .= false
      if params.has key
        n := Number params.get(key)!
        unless isNaN n
          setState key, Boolean n
          set = true
      unless set
        setState key, defaultState[key]
    if params.has 'path'
      setState 'path', params.get('path')!.split ','
  loadURL()
  window.addEventListener 'popstate', loadURL

  createEffect =>
    search .= ''
    for opt of ['start', 'goal', 'extra', 'forbid'] as const
      unless state[opt] is defaultState[opt]
        search += `&${opt}=${encodeURIComponent state[opt]}`
    for opt of ['swap', 'insert', 'delete', 'shortest'] as const
      unless state[opt] is defaultState[opt]
        search += `&${opt}=${Number state[opt]}`
    path := state.path.join(',').replace /,+$/, ''
    search += `&path=${path}` if path
    search = `?${search[1..]}` if search
    return if search is window.location.search
    history.pushState null, 'ladder', `${window.location.pathname}${search}`

  recompute := =>
    s := state.start
    g := state.goal
    unless s
      setLadder null
      setLadderText null
      setDAG null
      return
    console.log s, '->', g
    {shortest} := state
    ladderSearch.options = options()
    setComputing true
    setLadderText ''
    queueMicrotask =>
      if shortest
        setLadder ladderSearch.shortestLadder s, g
      else
        setDAG ladderSearch.ladderDAG s, g
      setComputing false
  createEffect recompute

  swapStartGoal := =>
    {start, goal} := state
    setState 'start', goal
    setState 'goal', start

  onForbid := (word: string) =>
    setState 'forbid', `${word} ${state.forbid}`

  randomize := :void =>
    d := DAG()
    return unless d
    word .= state.start
    g := state.goal
    seen := new Set<string>
    step .= 0
    until word is g
      seen.add word
      children .= d.child.get word
      break unless children
      children = children.filter (child) => not seen.has child
      break unless children.length
      word = children[Math.floor Math.random() * children.#]
      setState 'path', step, word
      step++

  isInvalid := (word: string) =>
    ds := dictSet()
    return unless ds?
    return false if ds.has word
    return false if new RegExp(`(^|\\s)${word}($|\\s)`).test state.extra
    true

  [wordList, setWordList] := createSignal<WordList> 'ecprice'

  createEffect =>
    setDictSet undefined
    fetch wordListURL[wordList()]
    .then (response) =>
      response.text() |> await |> ladderSearch.parseDict
      setDictSet ladderSearch.dictSet!
      recompute()

  <header>
    Word Ladder Designer
  <.input>
    from <input #start value=state.start
    classList=
      invalid: isInvalid state.start
    onInput=
      (e) => setState 'start', e.currentTarget.value.toLowerCase()
    >
    &nbsp;
    to <input #goal value=state.goal
    classList=
      invalid: isInvalid state.goal
    onInput=
      (e) => setState 'goal', e.currentTarget.value.toLowerCase()
    >
    &nbsp;
    <button onClick=swapStartGoal>â†”
    <!--
    &nbsp;
    <button onClick=recompute>Search
    -->
  <.input>
    dictionary <select onInput=
      (e) => setWordList e.currentTarget.value as WordList
    >
      <option value="ecprice">ecprice-10000
      <option value="dwyl">dwyl-370000
    &nbsp;
    <Show when=dictSet()?.size fallback=<b><i>(still loading)</i></b>>
      has {dictSet()?.size} words
  <.input>
    extra words: <textarea #extra value=state.extra onInput=
      (e) => setState 'extra', e.currentTarget.value.toLowerCase()
    >
    &nbsp;
    forbid words: <textarea #forbid value=state.forbid onInput=
      (e) => setState 'forbid', e.currentTarget.value.toLowerCase()
    >
  <.input>
    >'Operations: '
    <label>
      <input #swap type="checkbox" checked=state.swap onInput=
        (e) => setState 'swap', e.currentTarget.checked
      >
      >' swaps '
    <label>
      <input type="checkbox" checked=state.insert onInput=
        (e) => setState 'insert', e.currentTarget.checked
      >
      >' inserts '
    <label>
      <input type="checkbox" checked=state.delete onInput=
        (e) => setState 'delete', e.currentTarget.checked
      >
      >' deletes '
  <.input>
    >'Find '
    <label>
      <input type="radio" name="mode" value="shortest" checked=state.shortest onInput=
        (e) => setState 'shortest', e.currentTarget.checked
      >
      >'shortest or '
    <label>
      <input type="radio" name="mode" value="all" checked=!state.shortest onInput=
        (e) => setState 'shortest', not e.currentTarget.checked
      >
      >'all ladders'
    <button .randomize disabled=state.shortest onClick=randomize title="Warning: Can be slow, if it finds a long path">Randomize
    <hr>
  <main>
    <Show when={not computing() and not state.shortest and DAG()}><p>
      >if state.goal and DAG()?.dist?.size
        <i>{DAG()?.child.size} words along the way from {state.start.toUpperCase()} to {state.goal.toUpperCase()}
      else
        <i>{DAG()?.child.size} words reachable from {state.start.toUpperCase()}
    <table>
      >
        return <i>[Computing...]</i> if computing()
        if state.shortest
          l := ladder()
          return <i>[No ladder]</i> unless l
          text .= ''
          results :=
            for each word, step of l
              upper := word.toUpperCase()
              text += `${upper}\n`
              <tr>
                <td>{step+1}.
                <td>{upper}
                <td><button .forbid onClick=[onForbid, word]>
          setLadderText text
          results
        else
          d := DAG()
          return <i>[No ladder]</i> unless d
          word .= state.start
          g := state.goal
          results := []
          seen := new Set<string>
          step .= 0
          text .= ''
          until word is g
            upper := word.toUpperCase()
            text += `${upper}\n`
            prefix := <>
              <td>{step+1}.
              <td>{upper}<sub>{d.dist.get word}</sub>
              <td><button .forbid onClick=[onForbid, word]>
            seen.add word
            children .= d.child.get word
            if children
              children = children.filter not seen.has .
              let nextWord: string
              if children.length
                nextPath := state.path[step]
                if children.includes nextPath
                  nextWord = nextPath
                else
                  nextWord = children[0]
                  nextDist .= Infinity
                  for child of children
                    childDist := d.dist.get child
                    continue unless childDist?
                    if nextDist > childDist
                      nextWord = child
                      nextDist = childDist
              else
                results.push <tr>{prefix}<td><i>LOOP :-(
                break
              thisStep := step
              results.push <tr>{prefix}<td>>
                for child, i of children
                  select := (e) =>
                    e.preventDefault()
                    setState 'path', thisStep, child
                    for i of [thisStep+1...state.path.length]
                      setState 'path', i, undefined
                  <>
                    >', ' if i
                    >if child is nextWord
                      <span>{child.toUpperCase()}<sub>{d.dist.get child}
                    else
                      <a href="#" onClick=select>{child.toUpperCase()}<sub>{d.dist.get child}
              word = nextWord
              step++
            else
              results.push <tr>{prefix}<td><i>no children?!
              break
          if word is g
            upper := g.toUpperCase()
            text += `${upper}\n`
            results.push <tr>
              <td>{step+1}.
              <td>{upper.toUpperCase()}<sub>{d.dist.get g}
          setLadderText text
          results
    <Show when=ladderText()>
      <hr>
      <div>
        Copy/pastable ladder:
        <.link>
          <a target="_blank" href=
            `https://erikdemaine.org/fonts/strip/?text=${encodeURIComponent ladderText()}`
          >Fold from strip
      <pre #ladderText innerText=ladderText() onClick=
        (e) => window.getSelection()?.selectAllChildren e.currentTarget
      >
  <hr>
  <footer>
    <span>by <a href="https://erikdemaine.org">Erik Demaine</a> and <a href="https://martindemaine.org">Martin Demaine</a>, 2024
    <a href="https://github.com/edemaine/word-ladder">Source code on GitHub</a>
